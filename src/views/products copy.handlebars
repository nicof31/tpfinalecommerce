<!DOCTYPE html>
<html lang="en">
<head>
    <title>Products</title>
    <style>
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }

        body {
            background-image: linear-gradient(to right top, #000, #000);
        }

        .product-main {
            padding-top: 1em;
            font-family: 'Poppins', sans-serif;
            justify-content: center;
            align-items: center;
        }

        .card {
            width: 45%;
        }

        .centered {
            display: flex;
            justify-content: center;
        }

        .product-card-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            width: fit-content;
        }

        .withe-text {
            color: white;
            font-weight: bold;
        }

        h1 {
            color: white;
            text-align: center;
            font-weight: bold;
        }

        #adminButton {
            display: grid;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
</head>
<body>
    <div class="centered">
        <h1>backendEcommerce</h1>
    </div>
    <section class="perfil-container">
        {{#if error.status}}
        <p>{{error.message}}</p>
        {{/if}}
        <article>
            <div class="product-main">
                <div class="centered">
                    <div class="card m-1">
                        <ul class="card-body">
                            <li class="list-group list-group-flush">
                                <div class="user_info">
                                    <p class="list-group-item">Usuario: <span id="first_name"></span></p>
                                    <p class="list-group-item">Email: <span id="email"></span></p>
                                    <p class="list-group-item">Rol: <span id="rol"></span></p>
                                    <p class="list-group-item">Id Cart Asignado: <span id="cart"></span></p>
                                </div>
                                <span id="perfil">
                                    <p id="adminButton"></p>
                                </span>
                                <button onclick="goToCurrent()" class="btn btn-info">Current</button>
                                <button onclick="goToProfile()" class="btn btn-secondary">Ver Perfil</button>
                                <button onclick="goToUpDocument()" class="btn btn-success">Cargar Documentos</button>
                                <button onclick="goToHistoryTickets()"
                                    class="btn btn-warning {{#if isAdmin}}admin-disabled{{/if}}">Ver Tickets User</button>
                                <div class="mt-3">
                                    <input id="messageInput" type="text"
                                        placeholder="Escribe tu mensaje (m√°ximo 50 palabras)" maxlength="50"
                                        class="form-control">
                                    <button onclick="sendMessage()"
                                        class="btn btn-success mt-2 {{#if isAdmin}}admin-disabled{{/if}}">Enviar
                                        Mensaje</button>
                                    <button onclick="getMessages()" class="btn btn-secondary mt-2">Consultar
                                        Mensajes</button>
                                </div>
                                <button onclick="logout()" class="btn btn-primary">Cerrar sesi√≥n</button>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </article>
    </section>

    <section>
        {{#if productsPagination.isValid}}
        <div class="product-main text-center">
            <button onclick="goToCart()" class="btn btn-lg btn-success m-2">Carrito</button>
            <div class="product-card-container">
                {{#each productsPagination.docs}}
                <div class="card m-1">
                    <ul class="card-body">
                        <li class="list-group list-group-flush">
                            <p>_id: {{this._id}}</p>
                            <p class="list-group-item">title: {{this.title}} &nbsp; </p>
                            <p class="list-group-item">description: {{this.description}}</p>
                            <p class="list-group-item">code: {{this.code}} &nbsp; price: {{this.price}}</p>
                            <p class="list-group-item">category: {{this.category}} &nbsp;stock: {{this.stock}}</p>
                            <p class="list-group-item">thumbnail: {{this.thumbnail}} </p>
                            <button onclick="addToCart('{{this._id}}')" class="btn btn-success {{#if isUser}}user-only{{/if}} {{#if isAdmin}}admin-disabled{{/if}}">
                                Agregar al carrito
                            </button>

                        </li>
                    </ul>
                </div>
                {{/each}}
            </div>
            <br />
            {{#if productsPagination.hasPrevPage}}
            <a href={{productsPagination.prevLink}}><button class="btn btn-light m-2">Anterior</button></a>
            {{/if}}
            <div>
                <p class="withe-text m-2">Pagina actual: {{productsPagination.page}}</p>
            </div>
            {{#if productsPagination.hasNextPage}}
            <a href={{productsPagination.nextLink}}><button class="btn btn-light m-2">Siguiente</button></a>
            {{/if}}
        </div>
        {{else}}
        <h1>No hay productos para mostrar</h1>
        {{/if}}
    </section>

    <script>
        function addToCart(idProducto) {
            const userRole = "{{user.role}}";
            if (userRole === "USER" || userRole === "PREMIUM") {
                console.log(idProducto);
                fetch(`http://localhost:8080/api/carts/${idProducto}/?accion=aumentar`, {
                        method: "POST",
                    })
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error("Error en la solicitud");
                        }
                        return response.json();
                    })
                    .then((data) => {
                        if (data.error) {
                            alert(data.error);
                        } else {
                            alert(`El producto _id: ${idProducto} se agreg√≥ correctamente al carrito`);
                        }
                    })
                    .catch((error) => {
                        console.log(`Error al agregar al carrito: ${error.message}`);
                        alert(`No puedes agregar tu propio producto al carrito`);
                    });
            } else if (userRole === "ADMIN") {
                alert("Los usuarios con rol ADMIN no pueden agregar productos al carrito.");
            } else {
                alert("Solo los usuarios con rol USER y PREMIUM pueden agregar productos al carrito.");
            }
        }

        function logout() {
            window.location.href = "/api/session/logout";
        }

        function perfilAdmin() {
            window.location.href = "http://localhost:8080/settings";
        }

        function goToProfile() {
            window.location.href = "/profile";
        }

        function goToCurrent() {
            window.location.href = "/api/session/current";
        }

        function goToUpDocument() {
            window.location.href = "/updocument";
        }

        function goToCart() {
            const cartId = "{{user.cart}}";
            if (cartId) {
                window.location.href = `http://localhost:8080/api/carts/${cartId}`;
            } else {
                alert("El usuario no tiene un carrito asignado.");
            }
        }

        function getUserData() {
            const user = {
                first_name: "{{user.first_name}}",
                last_name: "{{user.last_name}}",
                email: "{{user.email}}",
                role: "{{user.role}}",
                cart: "{{user.cart}}"
            };

            if (user.role === "ADMIN") {
                document.getElementById("first_name").innerText = user.first_name;
                document.getElementById("email").innerText = user.email;
                document.getElementById("rol").innerText = user.role;
                document.getElementById("cart").innerText = user.cart;

                const adminButton = document.createElement("button");
                adminButton.className = "btn btn-success";
                adminButton.innerHTML = "<p>Settings Admin</p>";
                adminButton.onclick = perfilAdmin;
                document.getElementById("adminButton").appendChild(adminButton);
            } else {
                document.getElementById("first_name").innerText = user.first_name;
                document.getElementById("email").innerText = user.email;
                document.getElementById("rol").innerText = user.role;
                document.getElementById("cart").innerText = user.cart;
                console.log("üöÄ ~ file: products.handlebars:189 ~ getUserData ~ user.cart:", user.cart)
            }
        }

        function sendMessage() {
            const userRole = "{{user.role}}";
            const messageInput = document.getElementById("messageInput");
            const message = messageInput.value;

            if (userRole === "USER") {
                if (message.length > 0 && message.length <= 50) {
                    const requestData = {
                        message: message
                    };

                    fetch("http://localhost:8080/api/messages", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(requestData)
                        })
                        .then((response) => response.json())
                        .then((data) => {
                            alert("Mensaje enviado correctamente");
                            messageInput.value = ""; 
                            reloadPage();
                        })
                        .catch((error) => {
                            console.log(`Error al enviar el mensaje: ${error}`);
                            alert("Ocurri√≥ un error al enviar el mensaje");
                        });
                } else {
                    alert("El mensaje debe tener entre 1 y 50 caracteres.");
                }
            } else if (userRole === "ADMIN") {
                alert("Los usuarios con rol ADMIN no pueden enviar mensajes.");
            } else {
                alert("Solo los usuarios con rol USER pueden enviar mensajes.");
            }
        }

        function showAlert(response) {
            alert(JSON.stringify(response, null, 2));
        }

        function goToHistoryTickets() {
            const userRole = "{{user.role}}";

            if (userRole === "USER") {
                fetch("http://localhost:8080/api/session/tickets")
                    .then(response => response.json())
                    .then(data => {
                        showAlert(data);
                    })
                    .catch(error => {
                        console.error(`Error al obtener los tickets: ${error.message}`);
                        alert(`Error: ${error.message}`);
                    });
            } else if (userRole === "ADMIN") {
                alert("Los usuarios con rol ADMIN no pueden ver los tickets de usuario.");
            } else {
                alert("Solo los usuarios con rol USER pueden ver los tickets de usuario.");
            }
        }
        
        function getMessages() {
            fetch("http://localhost:8080/api/messages")
                .then(response => response.json())
                .then(data => {
                    showAlert(data);
                })
                .catch(error => {
                    console.error(`Error al obtener los mensajes: ${error.message}`);
                    alert(`Error: ${error.message}`);
                });
        }

        function reloadPage() {
            window.location.reload();
        }

        getUserData();

    </script>
</body>
</html>
